"""
Build script for bun-webkit


## Build
```
bazel build //:bun-webkit --platforms=//:linux_x64 -c opt
```

"""
load("@bazel_skylib//lib:selects.bzl", "selects")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

filegroup(
    name = "srcs",
    srcs = glob(["**"]),
    visibility = ["//visibility:private"],
)

cmake(
    name = "bun-webkit",
    cache_entries = {
                        "PORT": "JSCOnly",  # Port
                    } |
                    # Platform related definitions
                    select(
                        {
                            "@platforms//os:osx": {
                                "ENABLE_STATIC_JSC": "ON",
                                "ENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE": "ON",
                                "ENABLE_BUN_SKIP_FAILING_ASSERTIONS": "ON",
                                "USE_THIN_ARCHIVES": "OFF",
                                "ENABLE_FTL_JIT": "ON",
                                "USE_BUN_JSC_ADDITIONS": "ON",
                                "CMAKE_EXE_LINKER_FLAGS": "-fuse-ld=lld",
                                "CMAKE_AR": "$(which llvm-ar)",
                                "CMAKE_RANLIB": "$(which llvm-ranlib)",
                                "ALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS": "ON",
                                "CMAKE_OSX_DEPLOYMENT_TARGET": "11.0",
                                "PTHREAD_JIT_PERMISSIONS_API": "1",
                                "USE_PTHREAD_JIT_PERMISSIONS": "ON",
                                "ENABLE_REMOTE_INSPECTOR": "ON",
                                "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                            },
                            "@platforms//os:linux": {
                                "ENABLE_STATIC_JSC": "ON",
                                "ENABLE_BUN_SKIP_FAILING_ASSERTIONS": "ON",
                                "USE_THIN_ARCHIVES": "OFF",
                                "USE_BUN_JSC_ADDITIONS": "ON",
                                "ENABLE_FTL_JIT": "ON",
                                "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                                "ALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS": "ON",
                                "ENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE": "ON",
                            },
                            "@platforms//os:windows": {},
                        },
                        no_match_error = "Please provide platform",
                    ) |
                    # Architecture related definitions
                    select(
                        {
                            ":mac_and_x64": {
                                "CMAKE_OSX_ARCHITECTURES": "x86_64",
                            },
                            ":mac_and_arm64": {
                                "CMAKE_OSX_ARCHITECTURES": "arm64",
                            },
                            ":linux_and_x86": {
                                "CMAKE_CXX_FLAGS": "-m32",
                                "CMAKE_C_FLAGS": "-m32",
                                "CMAKE_EXE_LINKER_FLAGS": "-m32",
                                "CMAKE_SHARED_LINKER_FLAGS": "-m32",
                            },
                            ":linux_and_x64": {
                                "CMAKE_CXX_FLAGS": "-m64",
                                "CMAKE_C_FLAGS": "-m64",
                                "CMAKE_EXE_LINKER_FLAGS": "-m64",
                                "CMAKE_SHARED_LINKER_FLAGS": "-m64",
                            },
                            ":windows_and_x86": {
                                "CMAKE_CXX_FLAGS": "-m32",
                                "CMAKE_C_FLAGS": "-m32",
                                "CMAKE_EXE_LINKER_FLAGS": "-m32",
                                "CMAKE_SHARED_LINKER_FLAGS": "-m32",
                            },
                            ":windows_and_x64": {
                                "CMAKE_CXX_FLAGS": "-m64",
                                "CMAKE_C_FLAGS": "-m64",
                                "CMAKE_EXE_LINKER_FLAGS": "-m64",
                                "CMAKE_SHARED_LINKER_FLAGS": "-m64",
                            },
                        },
                        no_match_error = "Please provide platform",
                    ),
    generate_args = [
        "-GNinja",
    ],
    lib_source = ":srcs",
    tags = ["no-sandbox"],  # ccache need write access to cache dir
    # out_static_libs = ["libbun-webkit"],
)

config_setting(
    name = "os",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//os:linux",
        "@platforms//os:windows",
    ],
)

config_setting(
    name = "arch",
    constraint_values = [
        "@platforms//cpu:x86_32",
        "@platforms//cpu:x86_64",
        "@platforms//cpu:aarch64",
    ],
)

# for condition AND of select
selects.config_setting_group(
    name = "windows_and_x86",
    match_all = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_32",
    ],
)

selects.config_setting_group(
    name = "windows_and_x64",
    match_all = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)

selects.config_setting_group(
    name = "mac_and_x64",
    match_all = [
        "@platforms//os:osx",
        "@platforms//cpu:x86_64",
    ],
)

selects.config_setting_group(
    name = "mac_and_arm64",
    match_all = [
        "@platforms//os:osx",
        "@platforms//cpu:aarch64",
    ],
)

selects.config_setting_group(
    name = "linux_and_x86",
    match_all = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_32",
    ],
)

selects.config_setting_group(
    name = "linux_and_x64",
    match_all = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

# Windows
platform(
    name = "win32",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_32",
    ],
)

platform(
    name = "win64",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)

# macOS
platform(
    name = "mac_intel",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//cpu:x86_64",
    ],
)

platform(
    name = "mac_apple_silicon",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//cpu:aarch64",
    ],
)

# Linux
platform(
    name = "linux_x86",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_32",
    ],
)

platform(
    name = "linux_x64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)
